#include <FastLED.h>


#define NUM_LEDS 288
#define DATA_PIN 6
#define BRIGHTNESS 128
CRGB leds[NUM_LEDS];
//#define LOG_OUT 1 // use the log output function
#define OCTAVE 1
#define FFT_N 64 // set to 128 point fft
#include <FFT.h>

float stddev = 0;
float variance = 400;
float mean = 80;
float alpha = .0005;
int mean_min = 65;

void setup() {
  // put your setup code here, to run once:
  analogReference(EXTERNAL);
  FastLED.addLeds<WS2812B, DATA_PIN, GRB>(leds, NUM_LEDS);
  FastLED.setBrightness(BRIGHTNESS);
  FastLED.setDither(BINARY_DITHER);
  
  //Serial.begin(9600); // use the serial port

  //TIMSK0 = 0; // turn off timer0 for lower jitter - delay() and millis() killed
  ADCSRA = 0xe5; // set the adc to free running mode
  ADMUX = 0x40; // use adc0
  DIDR0 = 0x01; // turn off the digital input for adc0
  color_test();
}

void loop() {
  // put your main code here, to run repeatedly:
  while(1) { // reduces jitter
    
    cli();  // UDRE interrupt slows this way down on arduino1.0
    for (int i = 0 ; i < 128 ; i += 2) { // save 256 samples
      while(!(ADCSRA & 0x10)); // wait for adc to be ready
      ADCSRA = 0xf5; // restart adc
      byte m = ADCL; // fetch adc data
      byte j = ADCH;
      int k = (j << 8) | m; // form into an int
      k -= 0x0200; // form into a signed int
      k <<= 6; // form into a 16b signed int
      fft_input[i] = k; // put real data into even bins
      fft_input[i+1] = 0; // set odd bins to 0
    }
    // window data, then reorder, then run, then take output
    fft_window(); // window the data for better frequency response
    fft_reorder(); // reorder the data before doing the fft
    fft_run(); // process the data in the fft
    fft_mag_octave();
    sei(); // turn interrupts back on
    for (int i = NUM_LEDS; i>0; --i){
      leds[i] = leds[i-1];
    }
    float z = get_stats(fft_oct_out[2]);
    leds[0] = get_color(z);
    FastLED.show();
  }
}

CRGB get_color(float input){
  //Serial.println(input);

  input = float_constrain(input, 0.4, 1.5);
  byte color = float_map(input, 0.4, 1.5, 0, 255);
  
  if(color<40){
    return CRGB::Black;
  }else if(color < 85){
    return CRGB(0,0, color*3);
  }else if(color < 170){
    color -= 85;
    return CRGB(0,color*3, 255-color*3);
  }else{
    color -= 170;
    return CRGB(color*3,255-color*3,0);
  }
}

void color_test(){
  leds[0] = CRGB::Red;
  leds[1] = CRGB::Green;
  leds[2] = CRGB::Blue;
  for (float j = 0; j <= 1.5; j+=.01){
    for (int i = NUM_LEDS; i>0; --i){
      leds[i] = leds[i-1];
    }
    leds[0] = get_color(j);
    FastLED.show();
    //FastLED.delay(20);
  }
  for (int i=0; i <= NUM_LEDS; ++i){
    for (int i = NUM_LEDS; i>0; --i){
      leds[i] = leds[i-1];
    }
    leds[0] = CRGB::Black;
    FastLED.show();
    //FastLED.delay(20);
  }
}

float get_stats(byte input){
  float diff = input - mean;
  float incr = alpha * diff;
  mean = mean + incr;
  if (mean<mean_min){
    mean = mean_min;
  }
  variance = (1-alpha) * (variance + diff * incr);
  stddev = sqrt(variance);
  return (diff/stddev);
}

byte float_map(float x, float in_min, float in_max, float out_min, float out_max){
  return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
}

float float_constrain(float x, float _min, float _max){
  if(x < _min) return _min;
  if(x > _max) return _max;
  return x;
}
